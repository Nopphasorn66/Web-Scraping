import streamlit as st
import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# ===============================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
# ===============================
@st.cache_data
def load_and_prepare_data():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
    """
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡∏ä‡∏∑‡πà‡∏≠, ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Tomatometer, ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Popcornmeter)
    data = {
        'title': [
            'Dune: Part Two', 'Godzilla x Kong', 'Kingdom of the Planet of the Apes',
            'Inside Out 2', 'Furiosa', 'The Fall Guy', 'Civil War',
            'Ghostbusters: Frozen Empire', 'Kung Fu Panda 4', 'A Quiet Place: Day One',
            'IF', 'Madame Web', 'The Garfield Movie', 'Abigail', 'Challengers',
            'Imaginary', 'The Watchers', 'The Lord of the Rings', 'Top Gun: Maverick',
            'Barbie', 'Oppenheimer', 'The Batman', 'Pulp Fiction', 'The Shawshank Redemption',
            'Morbius', 'The Room'
        ],
        'tom_score': [93, 89, 88, 91, 90, 81, 82, 43, 71, 89, 49, 12, 38, 86, 89, 29, 31, 94, 96, 88, 93, 85, 92, 91, 15, 26],
        'pop_score': [95, 87, 85, 94, 82, 85, 68, 87, 86, 75, 50, 57, 49, 90, 82, 31, 38, 97, 99, 83, 91, 87, 96, 98, 71, 51]
    }
    df = pd.DataFrame(data)
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• K-Means
    df['tom_score_clean'] = df['tom_score'].astype(float) / 100
    df['pop_score_clean'] = df['pop_score'].astype(float) / 100
    
    return df

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
df = load_and_prepare_data()

# ===============================
# ‡∏™‡πà‡∏ß‡∏ô UI ‡∏Ç‡∏≠‡∏á Streamlit
# ===============================
st.title("‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")
st.markdown("### ‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Tomatometer ‡πÅ‡∏•‡∏∞ Popcornmeter")

# ‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°)
with st.sidebar:
    st.subheader("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°")
    n_clusters = st.slider(
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
        min_value=2,
        max_value=5,
        value=4,
        step=1
    )
    st.markdown("---")
    st.info("üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£")


# ===============================
# ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° K-Means ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
# ===============================
if not df.empty:
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
    features = df[['tom_score_clean', 'pop_score_clean']]

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• K-Means
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
    df['cluster'] = kmeans.fit_predict(features)

    st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå")

    # ‡∏û‡∏•‡∏≠‡∏ï‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
    fig, ax = plt.subplots(figsize=(10, 6))
    scatter = ax.scatter(df['tom_score'], df['pop_score'], c=df['cluster'], cmap='viridis', s=100)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
    for i, row in df.iterrows():
        ax.annotate(row['title'], (row['tom_score'] + 1, row['pop_score'] + 1), fontsize=8)

    # ‡∏û‡∏•‡∏≠‡∏ï centroid ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
    centroids = kmeans.cluster_centers_
    ax.scatter(centroids[:, 0] * 100, centroids[:, 1] * 100, marker='X', s=200, color='red', label='Cluster Centroids')
    
    ax.set_title('‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢ K-Means')
    ax.set_xlabel('‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Tomatometer (%)')
    ax.set_ylabel('‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Popcornmeter (%)')
    ax.grid(True)
    ax.legend()
    st.pyplot(fig)

    st.markdown("---")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
    for i in range(n_clusters):
        cluster_df = df[df['cluster'] == i].copy()
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
        avg_tom = cluster_df['tom_score'].mean()
        avg_pop = cluster_df['pop_score'].mean()
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        if avg_tom >= 70 and avg_pop >= 70:
            cluster_name = f"‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà {i+1}: **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏ä‡∏°**"
        elif avg_tom >= 70 and avg_pop < 70:
            cluster_name = f"‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà {i+1}: **‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡∏Ç‡∏ß‡∏±‡∏ç‡πÉ‡∏à‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡πå**"
        elif avg_tom < 70 and avg_pop >= 70:
            cluster_name = f"‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà {i+1}: **‡∏Ç‡∏ß‡∏±‡∏ç‡πÉ‡∏à‡∏ú‡∏π‡πâ‡∏ä‡∏°, ‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡πå‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏∑‡πâ‡∏°**"
        else:
            cluster_name = f"‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà {i+1}: **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°**"

        with st.expander(f"{cluster_name} ({len(cluster_df)} ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á)"):
            st.dataframe(cluster_df[['title', 'tom_score', 'pop_score']].reset_index(drop=True))

# ```
# eof

# ### ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î

# 1.  **‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå:** ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏∑‡πà‡∏≠ `movie_clustering_app.py`
# 2.  **‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ:** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏î‡∏¢‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô Terminal:
#     ```sh
#     pip install streamlit pandas scikit-learn matplotlib
#     ```
# 3.  **‡∏£‡∏±‡∏ô‡πÅ‡∏≠‡∏õ:** ‡πÄ‡∏õ‡∏¥‡∏î Terminal ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:
#     ```sh
#     streamlit run movie_clustering_app.py
    
